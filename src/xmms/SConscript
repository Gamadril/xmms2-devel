#
Import('base_env')

env = base_env.Copy(INCLUDES=["include"], LIBS=["xmmsipc"],
		    LIBPATH=["#builddir/lib/xmmsipc"])

xmms2d_sources = Split ("config.c plugin.c object.c ipc.c "+
			"transport.c decoder.c output.c playlist.c magic.c "+
			"plsplugins.c unixsignal.c ringbuf.c "+
			"log.c visualisation.c main.c mediainfo.c "+
			"effect.c error.c medialib.c "+
			"sample.c")

b = Builder(action = 'python src/xmms/generate-converter.py > $TARGET')
env.Depends('#src/xmms/converter.c', 'generate-converter.py')
env.SourceCode('#src/xmms/converter.c', b)

#env.Command('converter.c', 'generate-converter.py', 'python src/xmms/generate-converter.py >src/xmms/converter.c') 

if env.HasGroup ("sqlite") :
	xmms2d_sources.append ("sqlite.c")

env.AddFlagsFromGroup("glib")
env.AddFlagsFromGroup("glib-thread")
env.AddFlagsFromGroup("glib-module")
env.AddFlagsFromGroup("math")
env.AddFlagsFromGroup("sqlite")

if env.HasGroup ("valgrind") :
	env.AddFlagsFromGroup("valgrind")

#env.Program(target = "xmms2d" , source = xmms2d_sources )
#env.Install("/usr/local/bin","xmms2d")

env.XmmsConfig("xmms2.conf")

env.XmmsProgram("xmms2d", xmms2d_sources)
