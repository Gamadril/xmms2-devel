
Import('base_env')

base_env = base_env.Copy(LINKFLAGS=["-module", "-avoid-version"])

Export('base_env')

file = base_env.Copy()
file.AddFlagsFromGroup("glib")
file.XmmsPlugin('xmms_file', ['file/file.c'])

if base_env.sys == 'Darwin':
	ca = base_env.Copy()
	ca.AddFlagsFromGroup("glib")
	ca.AddFlagsFromGroup("CoreAudio")
	ca.XmmsPlugin('xmms_ca', ['coreaudio/coreaudio.c'])

if base_env.sys == 'Linux':
	oss = base_env.Copy()
	oss.AddFlagsFromGroup("glib")
	oss.XmmsPlugin('xmms_oss', ['oss/oss.c'])

if base_env.sys == 'FreeBSD':
	oss = base_env.Copy()
	oss.AddFlagsFromGroup("glib")
	oss.XmmsPlugin('xmms_oss', ['oss/oss.c'])

if base_env.sys == 'OpenBSD':
	sun = base_env.Copy()
	sun.AddFlagsFromGroup("glib")
	sun.XmmsPlugin('xmms_sun', ['sun/sun.c'])

m3u = base_env.Copy()
m3u.AddFlagsFromGroup("glib")
m3u.XmmsPlugin('xmms_m3u', ['m3u/m3u.c'])

html = base_env.Copy()
html.AddFlagsFromGroup("glib")
html.XmmsPlugin('xmms_html', ['html/html.c'])

eq = base_env.Copy()
eq.AddFlagsFromGroup("glib")
eq.XmmsPlugin('xmms_eq', ['eq/eq.c'])

diskwrite = base_env.Copy()
diskwrite.AddFlagsFromGroup("glib")
diskwrite.XmmsPlugin('xmms_diskwrite', ['diskwrite/diskwrite.c'])

wave = base_env.Copy()
wave.AddFlagsFromGroup("glib")
wave.XmmsPlugin("xmms_wave", ["wave/wave.c"])

if base_env.HasGroup("mad"):
	mad = base_env.Copy()
	mad.AddFlagsFromGroup("glib")
	mad.AddFlagsFromGroup("mad")
	mad.XmmsPlugin('xmms_mad', ['mad/mad.c', 'mad/id3.c', 'mad/xing.c'])

if base_env.HasGroup("modplug"):
	mad = base_env.Copy()
	mad.AddFlagsFromGroup("glib")
	mad.AddFlagsFromGroup("modplug")
	mad.XmmsPlugin('xmms_modplug', ['modplug/modplug.c'])

if base_env.HasGroup("speex") and base_env.HasGroup("ogg"):
	speex = base_env.Copy()
	speex.AddFlagsFromGroup("glib")
	speex.AddFlagsFromGroup("speex")
	speex.AddFlagsFromGroup("ogg")
	speex.XmmsPlugin('xmms_speex', ['speex/speex.c'])

if base_env.HasGroup("flac"):
	flac = base_env.Copy()
	flac.AddFlagsFromGroup("glib")
	flac.AddFlagsFromGroup("flac")
	flac.XmmsPlugin('xmms_flac', ['flac/flac.c'])

if base_env.HasGroup("vorbis"):
	vorbis = base_env.Copy()
	vorbis.AddFlagsFromGroup("glib")
	#vorbis.AddFlagsFromGroup("vorbis")
	#vorbis.AddFlagsFromGroup("vorbisfile")
	vorbis.Append (LIBPATH="/sw/lib")
	vorbis.Append (LIBS="vorbis")
	vorbis.Append (LIBS="vorbisfile")
	vorbis.Append (LIBS="ogg")
	vorbis.Append (CPPPATH="/sw/include")
	vorbis.XmmsPlugin('xmms_vorbis', ['vorbis/vorbisfile.c'])
	
if base_env.HasGroup("vorbis") and base_env.HasGroup("shout") and base_env.HasGroup("vorbisenc"):
	ices = base_env.Copy()
	ices.AddFlagsFromGroup("glib")
	ices.AddFlagsFromGroup("vorbis")
	ices.AddFlagsFromGroup("vorbisenc")
	ices.AddFlagsFromGroup("shout")
	ices.XmmsPlugin('xmms_ices', ['ices/ices.c', 'ices/encode.c'])

if base_env.HasGroup("curl"):
	curl_http = base_env.Copy()
	curl_http.AddFlagsFromGroup("glib")
	curl_http.AddFlagsFromGroup("curl")
	curl_http.XmmsPlugin('xmms_curlhttp', ['curl/curl_http.c'])

if base_env.HasGroup("samba"):
	samba = base_env.Copy()
	samba.AddFlagsFromGroup("glib")
	samba.AddFlagsFromGroup("samba")
	samba.XmmsPlugin('xmms_samba', ['samba/samba.c'])

if base_env.HasGroup("alsa"):
	alsa = base_env.Copy()
	alsa.AddFlagsFromGroup("glib")
	alsa.AddFlagsFromGroup("alsa")
	alsa.XmmsPlugin('xmms_alsa', ['alsa/alsa.c'])

if base_env.HasGroup("jack"):
        jack = base_env.Copy()
        jack.AddFlagsFromGroup("glib")
        jack.AddFlagsFromGroup("jack")
        jack.XmmsPlugin('xmms_jack', ['jack/jack.c'])

cdae = base_env.Copy()
ossrc=""
if cdae.sys == 'Linux':
	ossrc = 'cde/os_linux.c'

if len (ossrc) > 1:
	cdae_sources = Split ("cde/cdtransport.c " + ossrc)

	cdae.AddFlagsFromGroup("glib")
	cdae.XmmsPlugin('xmms_cdtransport', cdae_sources)

	cdae_decoder = base_env.Copy ()
	cdae_decoder.AddFlagsFromGroup("glib")

	if cdae_decoder.HasGroup("curl"):
		cdae_decoder.AddFlagsFromGroup("curl")
	cdae_decoder.XmmsPlugin('xmms_cddecoder', ['cde/cddecoder.c', 'cde/cddb.c'])

if base_env.HasGroup("sid") and base_env.HasGroup("resid"):
	sid = base_env.Copy()
	sid.AddFlagsFromGroup("glib")
	sid.AddFlagsFromGroup("sid")
	sid.AddFlagsFromGroup("resid")
	
	# needed for libresid-builder.so.0 to be found
	for path in sid['LIBPATH']:
		try:
			if path.index('sidplay') :
				sid.Append(LINKFLAGS=['-Wl,-rpath'])
				sid.Append(LINKFLAGS=[path])
				break
		except ValueError:
			pass
	
	# needed to link the sidplay_wrapper
	sid.Append(LIBS=['stdc++'])
	
	sid.XmmsPlugin('xmms_sid', ['sid/sidplay_wrapper.cpp', 'sid/sid.c'])
