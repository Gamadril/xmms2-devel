import Configure
from logging import warning
import os

def build_precompiled(bld):
    for t in ['xmmsvalue', 'xmmsapi']:
        bld(features = 'cc cshlib pyext',
            source = t+'.c',
            target = t,
            uselib_local = 'xmmsclient',
            includes = '../../../.. ../../../include ../../../includepriv',
            install_path = '${xmmsclient_PYTHONDIR}',
            mac_bundle = True)

def build_cython(bld):
    for t in ['xmmsvalue', 'xmmsapi']:
        bld(features = 'cython cc cshlib pyext',
            source = t+'.pyx',
            target = t,
            uselib_local = 'xmmsclient',
            includes = '../../../.. ../../../include ../../../includepriv',
            install_path = '${xmmsclient_PYTHONDIR}',
            mac_bundle = True,
            cython_includes = 'cython_include')

def build(bld):
    if bld.env['USE_PRECOMPILED']:
        build_precompiled(bld)
    else:
        build_cython(bld)

    bld.install_files('${xmmsclient_PYTHONDIR}', 'xmmsclient/__init__.py')
    bld.install_files('${xmmsclient_PYTHONDIR}', 'xmmsclient/sync.py')
    bld.install_files('${xmmsclient_PYTHONDIR}', 'xmmsclient/propdict.py')
    bld.install_files('${xmmsclient_PYTHONDIR}', 'xmmsclient/consts.py')
    bld.install_files('${xmmsclient_PYTHONDIR}', 'xmmsclient/collections.py')
    bld.install_files('${xmmsclient_PYTHONDIR}', 'xmmsclient/glib.py')
    bld.install_files('${xmmsclient_PYTHONDIR}', 'xmmsclient/qt3.py')
    # TODO: Distribute .pxd files

def configure(conf):
    conf.check_tool('python')
    if not conf.env['PYTHON']:
        conf.fatal("python not found")

    conf.check_python_version()
    conf.check_python_headers()

    conf.env['xmmsclient_PYTHONDIR'] = conf.env['PYTHONDIR'] + '/xmmsclient'

    prefix = os.path.commonprefix([conf.env['PYTHONDIR'], conf.env['PREFIX']])
    if not prefix:
        warning('default python libdir is not under PREFIX. specify path '
              + 'manually using the PYTHONDIR environment variable if you '
              + 'don\'t want the python bindings to be installed to '
              + conf.env['PYTHONDIR'])

    conf.check_tool('cython', tooldir=os.path.abspath('waftools'))
    if not conf.env['CYTHON'] or not conf.check_cython_version(minver='0.13'):
        conf.env['USE_PRECOMPILED'] = True

def set_options(opt):
    pass

